"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bodyParser = require("body-parser");
const child_process_1 = require("child_process");
const express = require("express");
const http = require("http");
const app = express();
const server = new http.Server(app);
app.use(bodyParser.json());
//TODO VALIDATE ID!!!
app.get("/start/:id", function (req, res) {
    console.log("starting", req.params.id);
    const signal = child_process_1.spawn("bash", [
        "-c",
        `cd .. && docker-compose run -d  --name slack_dj_ices_${req.params.id} -e ROOM_ID=${req.params.id} slack_dj_ices`
    ]);
    signal.stdout.on("data", data => {
        console.log(`stdout: ${data}`);
    });
    // signal.stderr.on('data', data => {
    //     console.log(`stderr: ${data}`);
    // });
    signal.on("close", code => {
        console.log(`starting exited with code ${code}`);
        code === 0 ? res.sendStatus(204) : res.sendStatus(500);
    });
});
app.get("/remove/:id", function (req, res) {
    console.log("removing", req.params.id);
    const signal = child_process_1.spawn("bash", [
        "-c",
        `cd .. && docker rm -f slack_dj_ices_${req.params.id}`
    ]);
    signal.on("close", code => {
        console.log(`removing exited with code ${code}`);
        code === 0 ? res.sendStatus(204) : res.sendStatus(500);
    });
});
app.get("/next/:id", function (req, res) {
    console.log("removing", req.params.id);
    const signal = child_process_1.spawn("bash", [
        "-c",
        `cd .. && docker exec slack_dj_ices_${req.params.id} bash -c "pgrep -f ices | xargs kill -s SIGUSR1"`
    ]);
    signal.on("close", code => {
        console.log(`next exited with code ${code}`);
        code === 0 ? res.sendStatus(204) : res.sendStatus(500);
    });
});
server.listen(8887, () => console.log("Docker Api listening on 8888"));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBDQUEwQztBQUMxQyxpREFBc0M7QUFDdEMsbUNBQW1DO0FBQ25DLDZCQUE2QjtBQUU3QixNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUUzQixxQkFBcUI7QUFDckIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBUyxHQUFHLEVBQUUsR0FBRztJQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXZDLE1BQU0sTUFBTSxHQUFHLHFCQUFLLENBQUMsTUFBTSxFQUFFO1FBQzNCLElBQUk7UUFDSix3REFDRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQ2IsZUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsZ0JBQWdCO0tBQzdDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRTtRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUVILHFDQUFxQztJQUNyQyxzQ0FBc0M7SUFDdEMsTUFBTTtJQUVOLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLElBQUksRUFBRSxDQUFDLENBQUM7UUFFakQsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBUyxHQUFHLEVBQUUsR0FBRztJQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLHFCQUFLLENBQUMsTUFBTSxFQUFFO1FBQzNCLElBQUk7UUFDSix1Q0FBdUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7S0FDdkQsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUVqRCxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxVQUFTLEdBQUcsRUFBRSxHQUFHO0lBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcscUJBQUssQ0FBQyxNQUFNLEVBQUU7UUFDM0IsSUFBSTtRQUNKLHNDQUNFLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFDYixrREFBa0Q7S0FDbkQsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU3QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgeyBzcGF3biB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgKiBhcyBodHRwIGZyb20gXCJodHRwXCI7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IHNlcnZlciA9IG5ldyBodHRwLlNlcnZlcihhcHApO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5cbi8vVE9ETyBWQUxJREFURSBJRCEhIVxuYXBwLmdldChcIi9zdGFydC86aWRcIiwgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgY29uc29sZS5sb2coXCJzdGFydGluZ1wiLCByZXEucGFyYW1zLmlkKTtcblxuICBjb25zdCBzaWduYWwgPSBzcGF3bihcImJhc2hcIiwgW1xuICAgIFwiLWNcIixcbiAgICBgY2QgLi4gJiYgZG9ja2VyLWNvbXBvc2UgcnVuIC1kICAtLW5hbWUgc2xhY2tfZGpfaWNlc18ke1xuICAgICAgcmVxLnBhcmFtcy5pZFxuICAgIH0gLWUgUk9PTV9JRD0ke3JlcS5wYXJhbXMuaWR9IHNsYWNrX2RqX2ljZXNgXG4gIF0pO1xuXG4gIHNpZ25hbC5zdGRvdXQub24oXCJkYXRhXCIsIGRhdGEgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBzdGRvdXQ6ICR7ZGF0YX1gKTtcbiAgfSk7XG5cbiAgLy8gc2lnbmFsLnN0ZGVyci5vbignZGF0YScsIGRhdGEgPT4ge1xuICAvLyAgICAgY29uc29sZS5sb2coYHN0ZGVycjogJHtkYXRhfWApO1xuICAvLyB9KTtcblxuICBzaWduYWwub24oXCJjbG9zZVwiLCBjb2RlID0+IHtcbiAgICBjb25zb2xlLmxvZyhgc3RhcnRpbmcgZXhpdGVkIHdpdGggY29kZSAke2NvZGV9YCk7XG5cbiAgICBjb2RlID09PSAwID8gcmVzLnNlbmRTdGF0dXMoMjA0KSA6IHJlcy5zZW5kU3RhdHVzKDUwMCk7XG4gIH0pO1xufSk7XG5cbmFwcC5nZXQoXCIvcmVtb3ZlLzppZFwiLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICBjb25zb2xlLmxvZyhcInJlbW92aW5nXCIsIHJlcS5wYXJhbXMuaWQpO1xuICBjb25zdCBzaWduYWwgPSBzcGF3bihcImJhc2hcIiwgW1xuICAgIFwiLWNcIixcbiAgICBgY2QgLi4gJiYgZG9ja2VyIHJtIC1mIHNsYWNrX2RqX2ljZXNfJHtyZXEucGFyYW1zLmlkfWBcbiAgXSk7XG5cbiAgc2lnbmFsLm9uKFwiY2xvc2VcIiwgY29kZSA9PiB7XG4gICAgY29uc29sZS5sb2coYHJlbW92aW5nIGV4aXRlZCB3aXRoIGNvZGUgJHtjb2RlfWApO1xuXG4gICAgY29kZSA9PT0gMCA/IHJlcy5zZW5kU3RhdHVzKDIwNCkgOiByZXMuc2VuZFN0YXR1cyg1MDApO1xuICB9KTtcbn0pO1xuXG5hcHAuZ2V0KFwiL25leHQvOmlkXCIsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG4gIGNvbnNvbGUubG9nKFwicmVtb3ZpbmdcIiwgcmVxLnBhcmFtcy5pZCk7XG4gIGNvbnN0IHNpZ25hbCA9IHNwYXduKFwiYmFzaFwiLCBbXG4gICAgXCItY1wiLFxuICAgIGBjZCAuLiAmJiBkb2NrZXIgZXhlYyBzbGFja19kal9pY2VzXyR7XG4gICAgICByZXEucGFyYW1zLmlkXG4gICAgfSBiYXNoIC1jIFwicGdyZXAgLWYgaWNlcyB8IHhhcmdzIGtpbGwgLXMgU0lHVVNSMVwiYFxuICBdKTtcblxuICBzaWduYWwub24oXCJjbG9zZVwiLCBjb2RlID0+IHtcbiAgICBjb25zb2xlLmxvZyhgbmV4dCBleGl0ZWQgd2l0aCBjb2RlICR7Y29kZX1gKTtcblxuICAgIGNvZGUgPT09IDAgPyByZXMuc2VuZFN0YXR1cygyMDQpIDogcmVzLnNlbmRTdGF0dXMoNTAwKTtcbiAgfSk7XG59KTtcblxuc2VydmVyLmxpc3Rlbig4ODg3LCAoKSA9PiBjb25zb2xlLmxvZyhcIkRvY2tlciBBcGkgbGlzdGVuaW5nIG9uIDg4ODhcIikpO1xuIl19