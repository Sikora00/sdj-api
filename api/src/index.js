"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bodyParser = require("body-parser");
const child_process_1 = require("child_process");
const express = require("express");
const http = require("http");
const app = express();
const server = new http.Server(app);
app.use(bodyParser.json());
//TODO VALIDATE ID!!!
app.get('/start/:id', function (req, res) {
    console.log('starting', req.params.id);
    const signal = child_process_1.spawn('bash', ['-c', `cd .. && docker-compose run -d --name slack_dj_ices_${req.params.id} -e ROOM_ID=${req.params.id} slack_dj_ices`]);
    signal.stdout.on('data', data => {
        console.log(`stdout: ${data}`);
    });
    signal.stderr.on('data', data => {
        console.log(`stderr: ${data}`);
    });
    signal.on('close', code => {
        console.log(`child process exited with code ${code}`);
        code === 0 ? res.sendStatus(204) : res.sendStatus(500);
    });
});
app.get('/remove/:id', function (req, res) {
    console.log('removing', req.params.id);
    const signal = child_process_1.spawn('bash', ['-c', `cd .. && docker rm -f slack_dj_ices_${req.params.id}`]);
    signal.stdout.on('data', data => {
        console.log(`stdout: ${data}`);
    });
    signal.stderr.on('data', data => {
        console.log(`stderr: ${data}`);
    });
    signal.on('close', code => {
        console.log(`child process exited with code ${code}`);
        code === 0 ? res.sendStatus(204) : res.sendStatus(500);
    });
});
server.listen(8887, () => console.log('Docker Api listening on 8888'));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBDQUEwQztBQUMxQyxpREFBc0M7QUFDdEMsbUNBQW1DO0FBQ25DLDZCQUE2QjtBQUU3QixNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUUzQixxQkFBcUI7QUFDckIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsVUFBUyxHQUFHLEVBQUUsR0FBRztJQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLHFCQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLHVEQUF1RCxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBRXZKLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFdEQsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsVUFBUyxHQUFHLEVBQUUsR0FBRztJQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLHFCQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLHVDQUF1QyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU3RixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRTtRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXRELElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSAnaHR0cCc7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IHNlcnZlciA9IG5ldyBodHRwLlNlcnZlcihhcHApO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5cbi8vVE9ETyBWQUxJREFURSBJRCEhIVxuYXBwLmdldCgnL3N0YXJ0LzppZCcsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG4gICAgY29uc29sZS5sb2coJ3N0YXJ0aW5nJywgcmVxLnBhcmFtcy5pZCk7XG4gICAgY29uc3Qgc2lnbmFsID0gc3Bhd24oJ2Jhc2gnLCBbJy1jJywgYGNkIC4uICYmIGRvY2tlci1jb21wb3NlIHJ1biAtZCAtLW5hbWUgc2xhY2tfZGpfaWNlc18ke3JlcS5wYXJhbXMuaWR9IC1lIFJPT01fSUQ9JHtyZXEucGFyYW1zLmlkfSBzbGFja19kal9pY2VzYF0pO1xuXG4gICAgc2lnbmFsLnN0ZG91dC5vbignZGF0YScsIGRhdGEgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgc3Rkb3V0OiAke2RhdGF9YCk7XG4gICAgfSk7XG5cbiAgICBzaWduYWwuc3RkZXJyLm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBzdGRlcnI6ICR7ZGF0YX1gKTtcbiAgICB9KTtcblxuICAgIHNpZ25hbC5vbignY2xvc2UnLCBjb2RlID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYGNoaWxkIHByb2Nlc3MgZXhpdGVkIHdpdGggY29kZSAke2NvZGV9YCk7XG5cbiAgICAgICAgY29kZSA9PT0gMCA/IHJlcy5zZW5kU3RhdHVzKDIwNCkgOiByZXMuc2VuZFN0YXR1cyg1MDApO1xuICAgIH0pO1xufSk7XG5cbmFwcC5nZXQoJy9yZW1vdmUvOmlkJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgICBjb25zb2xlLmxvZygncmVtb3ZpbmcnLCByZXEucGFyYW1zLmlkKTtcbiAgICBjb25zdCBzaWduYWwgPSBzcGF3bignYmFzaCcsIFsnLWMnLCBgY2QgLi4gJiYgZG9ja2VyIHJtIC1mIHNsYWNrX2RqX2ljZXNfJHtyZXEucGFyYW1zLmlkfWBdKTtcblxuICAgIHNpZ25hbC5zdGRvdXQub24oJ2RhdGEnLCBkYXRhID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYHN0ZG91dDogJHtkYXRhfWApO1xuICAgIH0pO1xuXG4gICAgc2lnbmFsLnN0ZGVyci5vbignZGF0YScsIGRhdGEgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgc3RkZXJyOiAke2RhdGF9YCk7XG4gICAgfSk7XG5cbiAgICBzaWduYWwub24oJ2Nsb3NlJywgY29kZSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBjaGlsZCBwcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGUgJHtjb2RlfWApO1xuXG4gICAgICAgIGNvZGUgPT09IDAgPyByZXMuc2VuZFN0YXR1cygyMDQpIDogcmVzLnNlbmRTdGF0dXMoNTAwKTtcbiAgICB9KTtcbn0pO1xuXG5zZXJ2ZXIubGlzdGVuKDg4ODcsICgpID0+IGNvbnNvbGUubG9nKCdEb2NrZXIgQXBpIGxpc3RlbmluZyBvbiA4ODg4JykpO1xuIl19